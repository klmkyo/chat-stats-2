extern crate cbindgen;

use std::env;

fn generate_c_headers() {
    let crate_dir = env::var("CARGO_MANIFEST_DIR").unwrap();
    let header_path = "./dist/generated/include/processor.h";

    cbindgen::Builder::new()
        .with_crate(crate_dir)
        .with_language(cbindgen::Language::C)
        .with_autogen_warning(
            "/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */",
        )
        .generate()
        .expect("Unable to generate bindings")
        .write_to_file(header_path);
}

fn main() {
    // Tell Cargo that if the given file changes, to rerun this build script.
    println!("cargo:rerun-if-changed=src/lib.rs");

    // Tell cargo to dynamically link the C function we defined
    // We will come back to this later
    let target_os = env::var("CARGO_CFG_TARGET_OS").unwrap();

    match target_os.as_str() {
        "ios" => {
            // println!("cargo:rustc-link-arg=-undefined");
            // println!("cargo:rustc-link-arg=dynamic_lookup");
        }
        "android" => {
            println!("cargo:rustc-link-arg=-Wl,--allow-shlib-undefined");
        }
        _ => {}
    }

    generate_c_headers();
}
